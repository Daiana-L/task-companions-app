
1- cree la carpeta lib y añadi el archivo fireStore.ts 
2- cree un componente de formulario simple para añadir una nueva tarea a la base de datos.
3- en el archivo fireStore.ts añadi los eventos addEvent, getEvent para traer las tareas y añadir nuevas.
4- importe la funcion addevent al formulario para que se guarden al toca el boton
5- cree el componente eventsCard para que reciba la data de getEvent y con un map la transforme a cada tarea y se muestre en pantalla.


dia 4 :

1- añadi deleteTask y toggleTaskStatus a fireStore.ts para poder eliminar tareas por id o cambiar el estado de completada o pendiente.
2- en eventsCard añadi la funcion handleDelete para eliminar la tarea y handleToggleStatus para marcar la tarea como completada o quitarlo si hace falta.
3- en fecha limite añadi new date para convertir el string de la fecha  en un objeto tipo Date de js. luego con el metodo .toLocaleString lo pasamos a hora
argentina "es-AR".
4- añadi el campo  createdAt a las task y use la clase de firestore Timestamp.now para que guarde la fecha y hora exacta de cuando se creo la tarea.
5- cree el componente de login simplecito con inicio de sesion con google. cree la funcion handleEmailLogin para iniciar sesion con email y contrasena y 
handleGoogleLogin para iniciar sesion con google.
6- cree el formulario de registro de usuario con email y contraseña. cree la funcion handleRegister y con la funcion createUserWithEmailAndPassword de firebase/auth cree el usuario.
7-Cree el componente de eventCalendar y tambien en lib anadi la configuracion de react big calendar .js.
8- en el componente del calendario cree un useaEffect para cargar las tareas y las guarde en el estado luego recorro ese estado con un map para transformar cada tarea en un formato para que react calendar entienda. luego les pase las taks al componente Calendar de react



dia 5:
-movi las funcionalidades de autentificación al useAuth
-borre las rutas de login, register y anadir tareas, solo deje home y landing page.
-cree los compomentes de loginForm, registerForm, taskForm en la carpeta componentes.
-cree un componente modal reutilizable para usarlos en la vista de login y registro.
-anadi en el home una barra selectora con 3 botones para ir al calendario , lista de tareas o al taskForm desde el home sin cambiar la ruta, segun el boton que selecciones 
cambia el estado y muestra el componente.
-en taskCard anadi el icono de lapiz para poder editar la tarea.
-en fireStore.ts anadi la funcion updateTask para poder editar los datos de una tarea ya creada y actualizarla.
-al tocar el icono de lapiz te muestra el formulario para editar la tarea y actualizarla con el boton de guardar.
-vi videos de zustand y lei la documentacion para saber como funciona y que hace.
        -creamos la carpeta store, aca vamos a poner todos los estados de la pagina.
        -importamos create de zustan, la función create es la que construye tu store o tu “tienda” de estado global.crea un hook personalizado con Zustand que guarda mi estado global y funciones para modificarlo
        -declaramos una constante, que guardará el hook que nos devuelve create. 
        Ese hook es el que vas a usar en tus componentes para acceder al estado global.
        - //create((set) => - set es la funcion  que usamos para actualizar el estado, esta funcion retorna un objeto
        y dentro de este objeto podemos definir las variables y asiganrles un estdo iniciar "count: 10"

-cree un authStore para simular si esta logiado o no. como es typescrip tube que definir una interfas y los tipos.
-luego importe este estado al navbar,y con un ternario validar si esta logiado o no y dependiendo de eso cambie el icono pero no funciono.



todo:
-finalizar useEffect para la autentificacion


dia 6: 
1- cree un useAuthStore para definir el contexto de usuario
2-investigue como funciona firebase auth para completar el useAuth  y poder iniciar sesion.
       1- creamos useAuth hook personalizado para centralizar toda la lógica de autenticación
       2-declaramos los estados de loading y setUser 
       3-cree un useEffect. Este useEffect sirve para escuchar los cambios en el estado de autenticación de Firebase y actualizar la aplicacion.
                Si un usuario inicia sesión = lo guarda en zustand (setUser).
                Si un usuario cierra sesión =  guarda null en zustand

3-instale react-hot-toast para las alertas 
4- importe ToastContainer al layout principal para que se vean las alertas.
5- puse las alertas de error , success y de confirmacion con sweetalert.